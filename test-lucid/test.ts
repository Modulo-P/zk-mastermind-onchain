import { Lucid, Emulator, Data, Assets, generatePrivateKey } from "https://deno.land/x/lucid/mod.ts"
import { plutusCode } from './plutus.ts';



// Generate users

async function generateUser(assets: Assets) {
  const privateKey = generatePrivateKey();
  return {
    privateKey,
    address: await (await Lucid.new(undefined, "Custom"))
      .selectWalletFromPrivateKey(privateKey).wallet.address(),
    assets,
  };
}

const codeMasterUser = await generateUser({ lovelace: 100000000n });
const codeBreakerUser = await generateUser({ lovelace: 100000000n });

// Create instance of Emulator

const emulator = new Emulator([codeMasterUser, codeBreakerUser]);

const lucid = await Lucid.new(emulator);

// Build script

const snarkScript = {
    type: "PlutusV2",
    script: plutusCode,
  };

const snarkScriptAddress = lucid.utils.validatorToAddress(
  snarkScript,
);

console.log(snarkScriptAddress)

// Create Transaction

// Datum0

const VerificationKeySchema = Data.Object({
  nPublic: Data.Integer(),
  vkAlpha: Data.Array(Data.Integer()),
  vkBeta: Data.Array(Data.Array(Data.Integer())),
  vkGamma: Data.Array(Data.Array(Data.Integer())),
  vkDelta: Data.Array(Data.Array(Data.Integer())),
  vkAlphaBeta: Data.Array(Data.Array(Data.Array(Data.Integer()))),
  vkIC: Data.Array(Data.Array(Data.Integer())),
})

type VerificationKey = Data.Static<typeof VerificationKeySchema>;
const VerificationKey = VerificationKeySchema as unknown as VerificationKey;

const verificationkey = Data.to<VerificationKey>(
  { nPublic:  8n
    , vkAlpha:  [
        3795299715714039340908618084264865998256621955409984942468357415238007983645652651653360284011447892408612079610874n,
        3740909070408591045120919413698287528187144682355668051710296372529490124306923634897822869390409438879409164241915n,
        1n
      ] 
    , vkBeta:  [
        [
        1479962375568278974053406954577299099896998877585180467094100882661734603756155622923015806399616781555904543918499n,
        1282688348900297859127237337649193326198909144981698281705248770221420928816110467107068555528087440467044856063243n
        ],
        [
        733823867553852527534443770547726606264661489376804970677692414626751053135620505961178188349730621472496486280344n,
        3568132839211237454139282504146087802149847919845839026989434913879386536425865740649003035815794078024888631918714n
        ],
        [
        1n,
        0n
        ]
      ] 
    , vkGamma:  [
        [
        352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,
        3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n
        ],
        [
        1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n,
        927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n
        ],
        [
        1n,
        0n
        ]
      ] 
    , vkDelta:  [
        [
        1353393735911399733001346461221162325972410220876583436113192041994751550678980703279793279638717866135006323420631n,
        1663385656129442275200393685562564785679694934075814216566273183851558594832831582791032569629803691099150489620160n
        ],
        [
        708737295112892494509700149900544136746517394998259241303705733718920424267680165940699045172443063526360785292879n,
        3328340058835355348548106604084045383464340611254634745948451991322538590514895094901522682242740973424822466668748n
        ],
        [
        1n,
        0n
        ]
      ] 
    , vkAlphaBeta:  [
        [
        [
          641911636562041970998758479503653474081798156021236201384621075235427228727619953418912898294817073083605412977021n,
          1526454139709183975198854537045400987278974050555842010229450858657467755434264130113144998783389784646612683585971n
        ],
        [
          3750578833584391154735531723945147979955274505224671402832467790183148780074392991889824833618557106154385497737750n,
          3729888564637630421666382759381548673678828870837951303937431330177966474943470953648925919331757914853888232235562n
        ],
        [
          2777605582418188429789947088508000864759311790494491172609035845557532678354828925584388733765138429573784691862703n,
          643577381063051902250547993585729121047983854065216308697867395383343542836206018865508411035860839433722476836800n
        ]
        ],
        [
        [
          2215033301088043553785604061032892068577299977097905342670398265338147923834261581901520504691035140557219750442839n,
          3120278438318141104598690779112871814219511188437464885691668513460864840411255021507928513988683130245897192068314n
        ],
        [
          2732754268704492860515537487504492841558219437364332104494749524928017939454936888611371016529233361032049166535621n,
          2202474238625063475736846743918367229451864800135369226508613976451889061163039656899371838346777636174160372158213n
        ],
        [
          3173259493678691362235958026812306333730986719181903312319672185364062219456082826432173936271347618928153489513306n,
          1309677627113044142204597929543008631257189058192572264152165854638139536629855681862573215492261924881945220330905n
        ]
        ]
      ]
    , vkIC:  [
        [
        460011573987451694765313439913723991548363227026654613170879036529615602110198104412975563311765557862568670306486n,
        3563414098503370868449150259915708392465715769295112885984402384445055053562858718716858028062795912963686351448082n,
        1n
        ],
        [
        3272398904161804502341578995023264413304793490671458018279621939374394603581206484403482829070348343931975581867068n,
        2263011566556596419134026778107801162195992794964134760372487437029900064271068576861565913976752775406225835186990n,
        1n
        ],
        [
        3850200697587968249346881221601869239808393950440685816764545200480106691037730077835451606448195595687630465054561n,
        609832685495160949949634028970999315860808411777602021430150247564817024368754333816192548991947689362699890900453n,
        1n
        ],
        [
        223698790807280382214983502313708953323766469806155875579616117881773035835029651226633220751121187829872564134822n,
        2359410742496544888619039404730843970304758507028000361994663395359389411957931417321254991566591033520735456655247n,
        1n
        ],
        [
        348433928660390838255820272856126814768121639882774676087106128953500158767033936515993076652007326484685146904533n,
        2693507938308919323702912819574475274735300922680437304307983594551723168795751684599440993265178072537282502088441n,
        1n
        ],
        [
        3467254973435625261838127302725458173075719328668816341352956597847757091782944369506907297433108895862814064128302n,
        2566074365220853869659008458896966709327301771790288878776430932658701429134309251630103356015280260143700950992921n,
        1n
        ],
        [
        2193912355411083146638396596048601442172727897741968199769378719943370685715588880824138937084901565331572935734049n,
        182145738631642628229334595280060170625879952978708444787035277809050113500588858484945810520875469453271713679898n,
        1n
        ],
        [
        3821731117745132560004015850382348221744171956742418571378369915214889991153490466513997615155722336820903639934783n,
        1681040550805768395793878397707615277482058710384708343889261510166574972548910670005219171859068970428682182857449n,
        1n
        ],
        [
        2094000592419384363610907745285222732976540487249252805244545333567860119038573641329054422452287479481031318445236n,
        512053980481585386494834544979687462604761711129770045167402668304545106501973212950438867847915314285580627661770n,
        1n
        ]
      ]
    } ,
  VerificationKeySchema
);


const GameDatumSchema = Data.Object({
  codeMaster: Data.Bytes(),
  codeBreaker: Data.Bytes(),
  hashSol: Data.Integer(),
  guesses: Data.Array(Data.Integer()),
  blackPegs: Data.Integer(),
  whitePegs: Data.Integer(),
  currentTurn: Data.Integer(),
  expirationTime: Data.Integer(),
  vk: Data.Any(), // This ocassioned errors. Data.Any(),?
});

type GameDatum = Data.Static<typeof GameDatumSchema>;
const GameDatum = GameDatumSchema as unknown as GameDatum;

const gameDatum0 = Data.to<GameDatum>(
  {
    codeMaster: "",
    codeBreaker: "",
    hashSol: 50470988812045707708375033903681453285217735455216815939546570682147418599455n,
    guesses: [],
    blackPegs: 0n,
    whitePegs: 0n,
    currentTurn: 0n,
    expirationTime: 1000n,
    vk: verificationkey,
  } ,
  GameDatumSchema
);


lucid.selectWalletFromPrivateKey(codeMasterUser.privateKey);


const tx0 = await lucid.newTx()
  .payToContract(snarkScriptAddress,{ inline: gameDatum0 }, {
    lovelace: 12000000n,
  })
  .complete()


const signedTx0 = await tx0.sign().complete()

const tx0Hash = await signedTx0.submit();

const scriptUtxos = await lucid.utxosAt(snarkScriptAddress);

emulator.awaitSlot(1000);

emulator.log();

// Turn1

lucid.selectWalletFromPrivateKey(codeBreakerUser.privateKey);



